object AssetEventProcess extends Enumeration {
    type AssetEventProcess = Value
    val Process,
    	Discard,
    	DiscardFirst,
      	DiscardSecond,
      	OpenEnd,
      	CloseEnd,
      	Invalidate = Value
  }


object AssetEvent extends Enumeration {
    type AssetEvent = Value
    val AssetTunedEvent,
      AssetPlaybackBitrateEvent,
      AssetStillTunedEvent,
      AssetStartOverEvent,
      AssetCommercialBreakStartEvent,
      AssetCommercialBreakEndEvent,
      AssetTuneForwardEvent,
      AssetTuneRewindEvent,
      AssetTunePauseEvent,
      AssetTuneResumeEvent,
      AssetTunedEnd = Value
  }

  object AssetEventField extends Enumeration {
    type AssetEventField = Value
    val assetSessionId,       // most or all events
      deviceTimestamp,
      serviceTimestamp,
      sessionId,
      programStartTime,
      programEndTime,
      accountId,
      deviceId,
      progId,
      assetId,
      cid,                    // channel id
      profileId,
      assetType,              // linear or vod
      contentType,            // e.g. TV
      deviceType,             // model no?
      liveTuneType,           // on-now, timeshifted, or catch-up
      onNowPoint,             // current live point (should be roughly equivalent to deviceTimestamp for on-now or timeshifted)
      currentWatchPoint,      // current play point
      videoBitrate,           // playback bitrate
      audioBitrate,
      bandwidthEstimate,
      cdnUrl,
      startOverPoint,         // start over
      currentLiveBookmark,    // tuned
      trickStartPoint,        // forward and rewind
      trickEndPoint,
      startPoint,             // forward, rewind, resume
      stopPoint,              // pause
      playTime = Value        // tuned end
  }

  object LiveTuneType extends Enumeration {
    type LiveTuneType = Value
    val onNow = Value("On-now")
    val timeShifted = Value("On-now_TimeShifted")
    val catchUp = Value("Catch-up")
  }

val EventData = "eventData"

def getEventData(event: Map[String, Any]): Map[String, Any] = {
    if(event.contains(EventData)) event.get(EventData).get.asInstanceOf[Map[String, Any]]
    else event
}

object SchemaProperty extends Enumeration {
    type SchemaProperty = Value
    val namespace, name = Value
    val eventVersion = Value("event.version")
  }

def getSchemaProperty(event: Map[String, Any], sProp: SchemaProperty.SchemaProperty): String = {
    event.get(sProp.toString) match {
      case Some(a:Any) => a.toString
      case None => null
    }
  }

def getNumericValue(src:Option[Any]):Option[Double] = {
    try {
      src match {
        case Some(d:Double) => Some(d)
        case Some(l:Long) => Some(l.toDouble)
        case Some(i:Int) => Some(i.toDouble)
        case Some(s:String) => Some(s.toDouble)
        case _ => None
      }
    } catch {
      case e:NumberFormatException => None
    }
}

def pixelEventUtilsGetEventFieldNumeric(event: Map[String, Any], numericField:String): Option[Double] = {
    getNumericValue(getEventData(event).get(numericField))
 }

def getEventFieldNumeric(event: Map[String, Any], numericField: AssetEventField.AssetEventField): Option[Double] = {
    pixelEventUtilsGetEventFieldNumeric(getEventData(event), numericField.toString)
}


def getStringValue(src:Option[Any]):String = {
    src match {
      case None => ""
      case a:Some[_] => a.get.toString.trim
    }
  }

def pixelEventUtilsGetEventFieldString(event: Map[String, Any], field:String): String = {
    getStringValue(getEventData(event).get(field))
}

 def getEventFieldString(event:Map[String, Any], field:AssetEventField.AssetEventField):String = {
    pixelEventUtilsGetEventFieldString(event, field.toString)
  }


def isFieldPresent2(fieldValue: Any): Boolean = {
    fieldValue != null & !fieldValue.toString.trim.isEmpty
  }


def pixelEventUtilsSsFieldPresent(event: Map[String, Any], field:String):Boolean = {
    getEventData(event).get(field) match {
      case None => false
      case v:Some[_] => isFieldPresent2(v.get)
    }
  }

def isFieldPresent(event: Map[String, Any], field: AssetEventField.AssetEventField): Boolean = {
    pixelEventUtilsSsFieldPresent(event, field.toString)
  }

  
//The following function finds video view sections with normal speed
//In Time-Shift mode, it finds if any section which intersects with program end date time.  If it does, that
//section will be split into Time-Shift section and Catch-up section.
//_1 device time stamp
//_2 the actual time we want to assign to start or end.
//_3 live tune type
//_4 program end time Lilun

def findSection(startList:List[Tuple4[Long, Long, String, Long]], endList:List[Tuple4[Long, Long, String, Long]], returnList:List[Tuple3[Long, Long, String]]): List[Tuple3[Long, Long, String]] = {
  if(startList.isEmpty) return returnList
  if(endList.isEmpty) return returnList
//if the start point device time bigger than end point device time, skip.
//This shouldn't happen since the records were pre-sorted unless some records missing.
  if(startList(0)._1 < endList(0)._1){
//If the start point device tm < program end tm and end point 
//device tm > program end tm and it runs under time-shift mode, that 
//section needs to be splited 
       if((startList(0)._1  < startList(0)._4) && 
          (endList(0)._1 > startList(0)._4)
         ){
	  findSection( 
		startList.tail,
            	endList.tail,
            	returnList :::
//The left splitted section will be on time-shift.  The end point = start point + the time
//difference between time when program is ended and the device time which triggers the start
//of the section.  For example, if a tv live, from 8 to 9 and user into time shift mode (press
//resume @ 8:20 device time).  The time sift duration will be from 8:20 to 9:00.
//Use device tm is as close as we can get to approx timeshift/catch up split
			List((	startList(0)._2,
              			startList(0)._2  + (startList(0)._4 - startList(0)._1),
				"Time-Shift")
                            ) 
			:::
//the other part will be catch up
			List(	(startList(0)._2 + (startList(0)._4 - startList(0)._1),
              			endList(0)._2,
	      			"Catch-up")
		     	     )	 
            		
		      )
         }
    	else{
//Sometimes, for example, many fast forwards, possible the tricker start of 1 FF is a couple mil sec earlier than
//previous FF tricker end. Make them equal in this case.  In other case, if a very bad data, it will
//hide the bad data and not skew the report.  We have other DQ report which will revealthe issue.
	    if ((endList(0)._2 - startList(0)._2) < 0){
		findSection( startList.tail,
             		 endList.tail,
            		 returnList
                        )
	    }
            else{
    	    findSection( startList.tail,
             		 endList.tail,
            		 returnList ::: 
				List((startList(0)._2,
              		 	      endList(0)._2,
	      		              startList(0)._3
	                             ))   
                        )
            }
         }
    }
     else{
       		findSection(startList, endList.tail, returnList)
	}
}


//The following method is to determine the start and end of a continuous normal speed view section
def getEventTime(assetType:String, eventType:String, event:Map[String, Any], pointType:String) : Long = eventType match 
{

//For rewind and forward events, the tricker start is the end of a normal speed section
//tricker end is the start of the next normal speed section -- Lilun

  case "AssetTuneRewindEvent" | "AssetTuneForwardEvent" => 
	(if(pointType == "start") 
	     getEventFieldNumeric(event, AssetEventField.trickEndPoint).get.toLong
         else  
           getEventFieldNumeric(event, AssetEventField.trickStartPoint).get.toLong
         )

//For startover event, if linear asset, the program start time is the start of the next normal speed section.
//For Vod, it will be 0
//For LinearAsset, the program start time + the startOverPoint is where the end of the previous normal speed section
//For Vod, the startoverpoint is the end of the previous normal speed section - Lilun

  case "AssetStartOverEvent" =>
        (if ((assetType == "LinearAsset") && (pointType == "start"))
          getEventFieldNumeric(event, AssetEventField.programStartTime).get.toLong
         else if
            ((assetType == "LinearAsset") && (pointType == "end")) 
           getEventFieldNumeric(event, AssetEventField.startOverPoint).get.toLong +
           getEventFieldNumeric(event, AssetEventField.programStartTime).get.toLong
	else if
	    ((assetType == "VodAsset") && (pointType == "start")) 
		0
         else
         getEventFieldNumeric(event, AssetEventField.startOverPoint).get.toLong
	)

//AssetTunedEvent's currentWatchPoint is the start of the normal play speed section. 
//Has nothing to do with the end of a normal speed section -- Lilun

  case "AssetTunedEvent" =>  
	(if(pointType == "start"){ 
	       if(//event("eventData").asInstanceOf[Map[String, String]].isDefinedAt("currentWatchPoint")
	          isFieldPresent(event, AssetEventField.currentWatchPoint)
	         )  
		      getEventFieldNumeric(event, AssetEventField.currentWatchPoint).get.toLong
               else
         getEventFieldNumeric(event, AssetEventField.deviceTimestamp).get.toLong
         }
         else 
	     	-1 
         )                                                                                   
   
//AssetTunedEnd's currentWatchpoint is the end of a normal play speed section.
//Has nothing to do with the start of a section -- Lilun
 		
  case "AssetTunedEnd" =>  
	(if(pointType == "end") 
	     getEventFieldNumeric(event, AssetEventField.currentWatchPoint).get.toLong
         else 
	     	-1  
         )    

//AssetTuneResumeEvent's startPoint is the start point of a normal play speed section
//It is not needed for regular Distinct duraration calculation.  Due to possible
//introducing more bad data, exclude from normal distinct/total duration calculation
//(if data is good, it won't hurt to calculate, but no need)
//But it is used to calculate on-now, catchup and time-shift durations -- Lilun

  case "AssetTuneResumeEvent" =>
	(if((pointType == "start"))
		getEventFieldNumeric(event, AssetEventField.startPoint).get.toLong
         else 
	     	-1  
         )
//AssetTunePauseEvent's stopPoint is the end point of a normal play speed section
//It is not needed for regular Distinct duraration calculation.  Due to possible
//introducing more bad data, exclude from normal distinct/total duration calculation
//(if data is good, it won't hurt to calculate, but, no need)
//But it is used to calculate on-now, catchup and time-shift durations -- Lilun

  case "AssetTunePauseEvent" =>
	(if((pointType == "end"))
	     getEventFieldNumeric(event, AssetEventField.stopPoint).get.toLong
         else 
	     	-1 
         )
					   
  case _ => -1
}

//Input is sorted event list by device start time stamp.  For now, we just check
//if the 1st element is AssetTunedEvent.  If yes, return true, else, return false
//For Vod, I am thinking now, it is still possible to have tune start current watch point > 0 since
//what if user stops watch movie and then come back to resume watch it on next day??

def isValidEventData(eventList: List[Map[String, Any]]) : Boolean = {
  val fstEvent = eventList(0)
  if((getSchemaProperty(fstEvent, SchemaProperty.name) == AssetEvent.AssetTunedEvent.toString) && (isFieldPresent(fstEvent, AssetEventField.currentWatchPoint))){
     if((((getEventFieldString(fstEvent,AssetEventField.assetType) == "LinearAsset") && getEventFieldNumeric(fstEvent, AssetEventField.currentWatchPoint).get.toLong > 0)
         || 
         (getEventFieldString(fstEvent,AssetEventField.assetType) == "VodAsset" && getEventFieldNumeric(fstEvent, AssetEventField.currentWatchPoint).get.toLong >= 0))){
        true
     }
     else
       false
  }
  else 
    false    
}

//The following method calculates continuous normal watch speed time windows for each asset session id -- Lilun
def getSortedSection(eventList: List[Map[String, Any]]) : List[Tuple3[Long, Long, String]]  = {   
  val events = 
	  eventList.filter(p => (getSchemaProperty(p, SchemaProperty.name) == AssetEvent.AssetTuneResumeEvent.toString ||
                             getSchemaProperty(p, SchemaProperty.name) == AssetEvent.AssetTunePauseEvent.toString ||
                             getSchemaProperty(p, SchemaProperty.name) == AssetEvent.AssetTunedEnd.toString||
                             getSchemaProperty(p, SchemaProperty.name) == AssetEvent.AssetTunedEvent.toString||
                             getSchemaProperty(p, SchemaProperty.name) == AssetEvent.AssetStartOverEvent.toString ||
                             getSchemaProperty(p, SchemaProperty.name) == AssetEvent.AssetTuneRewindEvent.toString||
                             getSchemaProperty(p, SchemaProperty.name) == AssetEvent.AssetTuneForwardEvent.toString
                             )
                      )
  if(isValidEventData(eventList)) 
    findSection(
    (//1st step is to figure out all the start points of these sections.  Very important that inputs to this 
     //method is sorted by device date time and assume no 2 events will have same device time stamp for a give asset session id
     //if they are the same, assume the code has some kind of priority logic
     //Lilun
     for (event <- events) yield {
        (getEventFieldNumeric(event, AssetEventField.deviceTimestamp).get.toLong,
         getEventTime(getEventFieldString(event,AssetEventField.assetType), event("name").toString, event, "start"),
         getEventFieldString(event,AssetEventField.liveTuneType),
         getEventFieldNumeric(event, AssetEventField.programEndTime).get.toLong
        )
      }
     ).filter(x => x._2 != -1),
	 (
       //2nd step is to figure out the end point of these sections.  Not sure if tostring.todouble.tolong is a good approach though.
       for (event <- events) yield {
         (getEventFieldNumeric(event, AssetEventField.deviceTimestamp).get.toLong,
          getEventTime(getEventFieldString(event,AssetEventField.assetType), event("name").toString, event, "end"),
		  getEventFieldString(event,AssetEventField.liveTuneType),
		  getEventFieldNumeric(event, AssetEventField.programEndTime).get.toLong
          )
       }
      ).filter(x => x._2 != -1), //filter out records which are no needed.  For example, AssetTunedEnd is not used for providing data for the start point of each section
	  List()
   ).sortBy(f => f._1)
  else
    List((0, 0, getEventFieldString(eventList(0),AssetEventField.liveTuneType)))
}

//Simple summation of durations from each sections
//Recursively calling it. 
def sumVideoStreamDuration(sectionList:List[Tuple3[Long, Long, String]], cSum:Long) : Long = {
        if(sectionList.isEmpty) return cSum
        else
          sumVideoStreamDuration(sectionList.tail, cSum + (sectionList(0)._2 - sectionList(0)._1))
      }

//For distinct duration, the input time sections have been already sorted by the times of the each sector's starting point
//Starting point time is determined by each asset type.  For example, if you have a assetTunedEvent followed by AssetTuneForward
//event, the starting point of the normal speed section is the current watch point of assetTunedEvent and the end point of the
//section is the trick start point of the assetTuneForwardEvent.
//Logic does left to right sweep and calculate distinct duration -- Lilun
def sumVideoStreamDistinctDuration(sectionList:List[Tuple3[Long, Long, String]], cTime:Long, cSum:Long) : Long = {
        if(sectionList.isEmpty) return cSum
        if(cTime <= sectionList(0)._1)
          sumVideoStreamDistinctDuration(sectionList.tail, sectionList(0)._2, cSum + (sectionList(0)._2 - sectionList(0)._1))
        else if((sectionList(0)._1 < cTime) &&  (cTime < sectionList(0)._2))
          sumVideoStreamDistinctDuration(sectionList.tail, sectionList(0)._2, cSum + (sectionList(0)._2 - cTime))
        else
          sumVideoStreamDistinctDuration(sectionList.tail, cTime, cSum)
}




